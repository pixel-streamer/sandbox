/*
this is for testing small snippets
*/

window.addEventListener("load", function () {
	var output = document.querySelector("#output");
	var pre = document.createElement("pre");
	//console.log(pre);
	var preText = document.createTextNode(createGimpPalette(fileName, colArr));
	pre.appendChild(preText);
	output.appendChild(pre);
	//10 colors to a line
	displayVisboneCols(colListing);
});

const roundNearest = (value, nearest) => Math.round(value / nearest) * nearest;

function getNearest(r, g, b) {
	var r = roundNearest(parseInt(r), 3);
	var g = roundNearest(parseInt(g), 3);
	var b = roundNearest(parseInt(b), 3);
	return [r, g, b];
}

function getNearestWebSafeColor(r, g, b) {
	// console.log(r, g, b);
	//first, I tried this...
	var r = parseInt(Math.round((r / 255.0) * 5) * 51);
	var g = parseInt(Math.round((g / 255.0) * 5) * 51);
	var b = parseInt(Math.round((b / 255.0) * 5) * 51);
	/* 
  ... then 
 one site ...
 https://quickref.me/round-a-number-to-the-nearest-multiple-of-a-given-value
 ...
 said websafe was nearest multiple of 3

 so....

  var r = roundNearest(parseInt(r), 3);
  var g = roundNearest(parseInt(g), 3);
  var b = roundNearest(parseInt(b), 3);
   */
	return [r, g, b];
}

function createGimpPalette(fileName, colArr) {
	/*outputs a pre tag that contains a GIMP palette based on some color array input */
	//console.log(fileName);

	var tNodeText = "GIMP Palette" + "\n";
	tNodeText += "Name: " + fileName + "\n";
	tNodeText += "#" + "\n";
	colArr.forEach(function (key, index) {
		var color = key.trim().split(",");
		var r = parseInt(color[0].trim());
		var g = parseInt(color[1].trim());
		var b = parseInt(color[2].trim());
		color[3] = color[3].trim();
		var colName = color[3];

		var nearCol = getNearest(r, g, b);
		// var websafe = getNearestWebSafeColor(r, g, b);
		var websafe = getNearestWebSafeColor(nearCol[0], nearCol[1], nearCol[2]);

		color[0] = websafe[0];
		color[1] = websafe[1];
		color[2] = websafe[2];

		// tNodeText += key.trim().split(",").join(" ") + "\n";
		tNodeText += color.join(" ") + "\n";

		// -----
		var colChip = document.createElement("span");
		var colBlock = "&#9608;";
		colChip.innerHTML = colBlock;
		//var col = "color: " + "rgb(" + color[0] + "," + color[1] + "," + color[2] + ",1" + ");";

		var hexCol = getColorFromStr("rgb(" + color[0] + "," + color[1] + "," + color[2] + ",1" + ")");
		// var col = "color: " + "rgb(" + color[0] + "," + color[1] + "," + color[2] + ",1" + ");";
		var col = "color: " + hexCol + ";";
		//console.log(col);
		colChip.setAttribute("style", col + "display:inline-block;");

		var chips = document.querySelector("#col_chips");
		chips.appendChild(colChip);
		// ----
		return tNodeText;
	});
	return tNodeText;
}

var fileName = "name.gpl";
var colArr = [
	"255, 255, 255, WHITE                   ",
	"224, 201, 211, WARM-GREY-LIGHT         ",
	"170, 153, 161, WARM-GREY               ",
	/* "84,  75,  79, WARM-GREY-DARK           ", */
	"84,  85,  79, WARM-GREY-DARK           ",
	"0,   0,   0, BLACK                     ",
	"222, 151,  81, FLESH-LIGHT             ",
	"182, 104,  49, FLESH-DARK              ",
	"251, 190, 130, NAPLES-YELLOW           ",
	"247, 141, 141, PURE-RED-LIGHT          ",
	"249,  78, 109, PURE-RED                ",
	"218,  36,  36, PURE-RED-DARK           ",
	"255, 148,   0, PURE-ORANGE-LIGHT       ",
	"224, 112,   0, PURE-ORANGE             ",
	"138,  73,  38, PURE-ORANGE-DARK        ",
	/*  "255, 233,   0, PURE-YELLOW-LIGHT       ", */
	"255, 238,   0, PURE-YELLOW-LIGHT       ",
	"255, 191,   0, PURE-YELLOW             ",
	"224, 142,   0, PURE-YELLOW-DARK        ",
	/* "232, 255, 117, LEMON-YELLOW-LIGHT      ", */
	"232, 255, 170, LEMON-YELLOW-LIGHT      ",
	"236, 233,  16, LEMON-YELLOW            ",
	"236, 171,  17, LEMON-YELLOW-DARK       ",
	"71, 246,  65, PURE-GREEN-LIGHT         ",
	"8, 178,  59, PURE-GREEN                ",
	"0,  95,  65, PURE-GREEN-DARK           ",
	"94, 233, 233, PURE-BLUE-LIGHT          ",
	"0, 169, 255, PURE-BLUE                 ",
	"0,  81, 170, PURE-BLUE-DARK            ",
	"123, 100, 255, INDIGO-BLUE-LIGHT       ",
	"93,  84, 255, INDIGO-BLUE              ",
	"32,  35, 160, INDIGO-BLUE-DARK         ",
	"150,   0, 224, VIOLET-LIGHT            ",
	"114,   0, 170, VIOLET                  ",
	"69,   0, 103, VIOLET-DARK              ",
];

function getColorFromStr(inputStr) {
	var inputStr = inputStr.trim();
	//console.log("getColorFromStr");
	var digitTest = /\D/;
	// var isNotHex = /[a-f|A-F]|[0-8]/i;
	var isNotHex = /[g-z|G-Z|9]/i;
	var tempStringer;
	var tempStr2;
	if (inputStr.substring(0, 1) === "#") {
		//console.log("it's hex.");

		tempStringer = inputStr.substr(inputStr.indexOf("#") + 1);
		if (tempStringer.length <= 3) {
			//well, how long is it?
			if (tempStringer.length < 3) {
				//console.log(" less than three", tempStringer);
				tempStringer += "0000";
			} else {
				//console.log(" counts three", tempStringer);
				tempStr2 = tempStringer.toString();
				tempStringer = tempStringer.split("");

				tempStringer.splice(1, 0, tempStr2.substr(0, 1));
				tempStringer.splice(2, 0, tempStr2.substr(1, 1));
				tempStringer.splice(4, 0, tempStr2.substr(2, 1));

				tempStringer = tempStringer.join("");
				// //console.log(tempStringer);
			}
		}
		return generateBlockInOutput(outputRGBFromHexStr(tempStringer));
	} else if (inputStr.substring(0, 1).toLowerCase() !== "r") {
		// console.log("no hash");
		// console.log("no START r");
		// console.log("isNotHex.test(inputStr)", isNotHex.test(inputStr));
		//    if (inputStr.substring(0, 1).toLowerCase().match(digitTest)) {
		//doesn't start with a digit.
		//      console.log("it's no digit");
		//    }
		//    else {
		//starts with a digit.
		if (isNotHex.test(inputStr)) {
			configObj.outputTF.value = "input digits";
			configObj.outputVal = configObj.outputTF.value;
			configObj.outputStr = configObj.outputVal;
			return;
		} else {
			// console.log("no isNotHex");
			return generateBlockInOutput(outputRGBFromHexStr(fixShortHex(inputStr)));
		}
		//    }
	} else if (inputStr.substring(0, 1).toLowerCase() === "r") {
		/* assume it's rgb, or rgba */
		//console.log("assume it's rgb, or rgba");
		/*  var rgbTEST = /^\s{,*?}rgb.*?|^\s*?rgb.*?/i;
          if (rgbTEST.test(inputStr)) {
            //console.log("contains rgb");
          } */
		return generateBlockInOutput(outputHexFromRGBStr(inputStr));
	}
}

function generateBlockInOutput(colParam) {
	// console.log(":::generateBlockInOutput:::", colParam);
	if (colParam === undefined) {
		colParam = "#000";
	}
	//var outputView = document.getElementById("color_output");
	//outputView.innerHTML = "&#9608;";
	//outputView.style = "font-size:400%; color:" + colParam;
	return colParam;
}

function outputHexFromRGBStr(rgb2Hex) {
	/* rgba(69, 0, 103,1); */
	var tempStr = "";
	/* for some reason I couldn't do the two operations on the same line? */
	tempStr = rgb2Hex.substr(rgb2Hex.indexOf("("), rgb2Hex.length);
	tempStr = tempStr.substr(1, tempStr.lastIndexOf(")") - 1);
	//convert to array temporarily
	tempStr = tempStr.split(",");

	var tempRcolorHex = parseInt(tempStr[0].toString(), 10).toString(16);
	var tempGcolorHex = parseInt(tempStr[1].toString(), 10).toString(16);
	var tempBcolorHex = parseInt(tempStr[2].toString(), 10).toString(16);

	tempRcolorHex.toString().length < 2 ? (tempRcolorHex = "0" + tempRcolorHex) : tempRcolorHex;
	tempGcolorHex.toString().length < 2 ? (tempGcolorHex = "0" + tempGcolorHex) : tempGcolorHex;
	tempBcolorHex.toString().length < 2 ? (tempBcolorHex = "0" + tempBcolorHex) : tempBcolorHex;

	var colorVal = "";
	colorVal = "#" + tempRcolorHex + tempGcolorHex + tempBcolorHex;

	//configObj.outputTF.value = colorVal;
	//configObj.outputVal = configObj.outputTF.value.toUpperCase();
	//configObj.outputStr = configObj.outputVal;
	//console.log("colorVal: ", colorVal);
	return colorVal;
}

/* function makeCompactHexfromStr(col) {
	// function doesn't work if the hex only has 3 characters
	var colR = col.substring(0, 2);
	var colG = col.substring(2, 4);
	var colB = col.substring(4, 6);
	var tempR = colR.toString(16);
	var tempG = colG.toString(16);
	var tempB = colB.toString(16);
	console.log("HEX: ", tempR, tempG, tempB);
	return [tempR, tempG, tempB];
} */

function makeRGBfromHexStr(col) {
	/* function doesn't work if the hex only has 3 characters */
	var tempR = parseInt(parseInt(col.substring(0, 2), 16), 10);
	var tempG = parseInt(parseInt(col.substring(2, 4), 16), 10);
	var tempB = parseInt(parseInt(col.substring(4, 6), 16), 10);
	return [tempR, tempG, tempB];
}

function displayVisboneCols(arr) {
	console.log("displayVisboneCols", arr);

	// for (let i = 0; i < arr.length; i++) {
	// 	console.log("#" + arr[i], i);
	// }
	var inc = 0;

	var chipsVis = document.querySelector("#col_chips_threeshade");
	var chips = document.querySelector("#col_chips_visbone");

	// chipsVis
	var threeshadeTextP = document.createElement("p");
	var threeshadeText = document.createTextNode("three shades palette:");
	threeshadeTextP.appendChild(threeshadeText);
	chipsVis.appendChild(threeshadeTextP);
	chipsVis.appendChild(document.createElement("br"));

	arr.forEach(function (col, index) {
		var limit = 8;

		/*
	var tempRcolorHex = parseInt(tempStr[0].toString(), 10).toString(16);
	var tempGcolorHex = parseInt(tempStr[1].toString(), 10).toString(16);
	var tempBcolorHex = parseInt(tempStr[2].toString(), 10).toString(16);
	 */

		var tempRGB = makeRGBfromHexStr(col);
		var RGBFormatted = "rgba(" + tempRGB[0] + "," + tempRGB[1] + "," + tempRGB[2] + ",1)";

		var nearColWS = getNearest(tempRGB[0], tempRGB[1], tempRGB[2]);
		var colorWS = getNearestWebSafeColor(nearColWS[0], nearColWS[1], nearColWS[2]);
		var WSFormatted = "rgba(" + colorWS[0] + "," + colorWS[1] + "," + colorWS[2] + ",1)";

		console.log("#" + col, "rownum:", index % limit, /* "rgb: ", RGBFormatted, */ WSFormatted);

		var colChipVis = document.createElement("span");
		var colBlock = "&#9608;";
		colChipVis.innerHTML = colBlock;

		// colChipVis.setAttribute("style", "color:" + WSFormatted + ";" + "display:inline-block; font-size:25%");
		// colChipVis.setAttribute("style", "color:" + WSFormatted + ";" + "display:inline-block; ");
		colChipVis.setAttribute("style", "color:" + RGBFormatted + ";" + "display:inline-block; ");

		chipsVis.appendChild(colChipVis);
		// ----

		/*trying to make a color palette fit into an area (modulo) */
		if (inc % limit == limit - 1) {
			chipsVis.appendChild(document.createElement("br"));
		}
		inc++;
	});

	chipsVis.appendChild(document.createElement("br"));
	chipsVis.appendChild(document.createElement("br"));
}

var colListing2 = [
	"000033",
	"000066",
	"000099",
	"0000CC",
	"003300",
	"003333",
	"003366",
	"003399",
	"0033CC",
	"0033FF",
	"006600",
	"006633",
	"006666",
	"006699",
	"0066CC",
	"0066FF",
	"009900",
	"009933",
	"009966",
	"009999",
	"0099CC",
	"0099FF",
	"00CC00",
	"00CC33",
	"00CC66",
	"00CC99",
	"00CCCC",
	"00CCFF",
	"00FF33",
	"00FF66",
	"00FF99",
	"00FFCC",
	"330000",
	"330033",
	"330066",
	"330099",
	"3300CC",
	"3300FF",
	"333300",
	"333333",
	"333366",
	"333399",
	"3333CC",
	"3333FF",
	"336600",
	"336633",
	"336666",
	"336699",
	"3366CC",
	"3366FF",
	"339900",
	"339933",
	"339966",
	"339999",
	"3399CC",
	"3399FF",
	"33CC00",
	"33CC33",
	"33CC66",
	"33CC99",
	"33CCCC",
	"33CCFF",
	"33FF00",
	"33FF33",
	"33FF66",
	"33FF99",
	"33FFCC",
	"33FFFF",
	"660000",
	"660033",
	"660066",
	"660099",
	"6600CC",
	"6600FF",
	"663300",
	"663333",
	"663366",
	"663399",
	"6633CC",
	"6633FF",
	"666600",
	"666633",
	"666666",
	"666699",
	"6666CC",
	"6666FF",
	"669900",
	"669933",
	"669966",
	"669999",
	"6699CC",
	"6699FF",
	"66CC00",
	"66CC33",
	"66CC66",
	"66CC99",
	"66CCCC",
	"66CCFF",
	"66FF00",
	"66FF33",
	"66FF66",
	"66FF99",
	"66FFCC",
	"66FFFF",
	"990000",
	"990033",
	"990066",
	"990099",
	"9900CC",
	"9900FF",
	"993300",
	"993333",
	"993366",
	"993399",
	"9933CC",
	"9933FF",
	"996600",
	"996633",
	"996666",
	"996699",
	"9966CC",
	"9966FF",
	"999900",
	"999933",
	"999966",
	"999999",
	"9999CC",
	"9999FF",
	"99CC00",
	"99CC33",
	"99CC66",
	"99CC99",
	"99CCCC",
	"99CCFF",
	"99FF00",
	"99FF33",
	"99FF66",
	"99FF99",
	"99FFCC",
	"99FFFF",
	"CC0000",
	"CC0033",
	"CC0066",
	"CC0099",
	"CC00CC",
	"CC00FF",
	"CC3300",
	"CC3333",
	"CC3366",
	"CC3399",
	"CC33CC",
	"CC33FF",
	"CC6600",
	"CC6633",
	"CC6666",
	"CC6699",
	"CC66CC",
	"CC66FF",
	"CC9900",
	"CC9933",
	"CC9966",
	"CC9999",
	"CC99CC",
	"CC99FF",
	"CCCC00",
	"CCCC33",
	"CCCC66",
	"CCCC99",
	"CCCCCC",
	"CCCCFF",
	"CCFF00",
	"CCFF33",
	"CCFF66",
	"CCFF99",
	"CCFFCC",
	"CCFFFF",
	"FF0033",
	"FF0066",
	"FF0099",
	"FF00CC",
	"FF3300",
	"FF3333",
	"FF3366",
	"FF3399",
	"FF33CC",
	"FF33FF",
	"FF6600",
	"FF6633",
	"FF6666",
	"FF6699",
	"FF66CC",
	"FF66FF",
	"FF9900",
	"FF9933",
	"FF9966",
	"FF9999",
	"FF99CC",
	"FF99FF",
	"FFCC00",
	"FFCC33",
	"FFCC66",
	"FFCC99",
	"FFCCCC",
	"FFCCFF",
	"FFFF33",
	"FFFF66",
	"FFFF99",
	"FFFFCC",
	"110000",
	"001100",
	"000011",
	"111111",
	"220000",
	"002200",
	"000022",
	"222222",
	"440000",
	"004400",
	"000044",
	"444444",
	"550000",
	"005500",
	"000055",
	"555555",
	"770000",
	"007700",
	"000077",
	"777777",
	"880000",
	"008800",
	"000088",
	"888888",
	"AA0000",
	"00AA00",
	"0000AA",
	"AAAAAA",
	"BB0000",
	"00BB00",
	"0000BB",
	"BBBBBB",
	"DD0000",
	"00DD00",
	"0000DD",
	"DDDDDD",
	"EE0000",
	"00EE00",
	"0000EE",
	"EEEEEE",
	"000000",
	"0000FF",
	"00FF00",
	"00FFFF",
	"FF0000",
	"FF00FF",
	"FFFF00",
	"FFFFFF",
	"524C45",
	"FDA4FF",
	"7DFF7D",
	"FFA8A8",
	"FD04FF",
	"7DFD15",
	"FF7DFD",
	"04FFA8",
	"527DA8",
	"FD04FF",
	"A8FD52",
	"FF52FF",
	"527D7D",
	"7DFFA8",
	"FFFF7D",
	"A8FFA8",
	"FFFFA8",
	"FFFFA8",
	"FFFFA8",
	"A852FF",
	"FFA8FF",
	"FFFFA8",
	"7DA8A8",
	"FFFF52",
	"FFFF7D",
	"FFA8A8",
	"FF52FF",
	"A8FF52",
	"FF52FF",
	"FFA8FD",
	"49FF52",
	"A87D7D",
	"52FF7D",
	"7D52FF",
	"27A852",
	"7D7D52",
	"7D7DA8",
	"7D527D",
	"7D7D52",
	"FF7D7D",
	"52FF27",
	"FFFF52",
	"7DA8FF",
	"7D7DA8",
	"52A87D",
	"52FF7D",
	"7D7D27",
	"52A852",
	"FF527D",
	"7DFD48",
	"FFA852",
	"FF7D7D",
	"FF7D7D",
	"7DA87D",
	"FF7D7D",
	"FF7DFF",
	"7DA87D",
	"52FF7D",
	"527DFF",
	"7D7D7D",
	"A87DFF",
	"FF7D7D",
	"7DFF7D",
	"A8A8FF",
	"7D7D27",
	"FFFD05",
	"7DFF7D",
	"FF277D",
	"7DFD49",
	"FF27FF",
	"7D52FF",
	"A87D52",
	"FF277D",
	"7D7DFF",
	"7DFF7D",
	"7D7D52",
	"7D527D",
	"27FFA8",
	"7D52FF",
	"52FFFF",
	"5252A8",
	"FF7DFF",
	"FFFF7D",
	"527DA8",
	"7DA87D",
	"5227FF",
	"52FF7D",
	"52A8FD",
	"FCFFFD",
	"FCFFFD",
	"FCFFFD",
	"FCFFFD",
	"B8FF7D",
	"5252A8",
	"FF7DFF",
	"FF7DFD",
	"06FF7D",
	"FD13FF",
	"A8FD0A",
	"FFA8A8",
	"FFFF7D",
	"FD08FF",
	"A852FD",
	"07FF52",
	"7DFF7D",
	"FFFF52",
	"7DFF52",
	"FF52FF",
	"52FD04",
	"FF52FF",
	"FFFFA8",
	"5252FD",
	"04FF7D",
	"A8FD04",
	"FF7D52",
	"52A8FF",
	"FF7DFD",
	"13FFA8",
	"A8FFFF",
	"527DFF",
	"7D7D7D",
	"FFFF7D",
	"7D7DA8",
	"7DFF7D",
	"7D7DFF",
	"FD057D",
	"FF7D7D",
	"FF7D7D",
	"FF27FF",
	"FFA87D",
	"FF7DA8",
	"FD087D",
	"FF7D7D",
	"FF7D7D",
	"FFFF27",
	"7D7DA8",
	"FF7D7D",
	"FF7DFF",
	"52A852",
	"FF7D7D",
	"7DFF7D",
	"A852FF",
	"7DFF7D",
	"7DFF52",
	"7DFFFF",
	"FF52FF",
	"A87D7D",
	"FF27A8",
	"7DA8FF",
	"FF7DFF",
	"FFFF7D",
	"A87DFF",
	"7D7D7D",
	"A8A87D",
	"A8FD0B",
	"FFA87D",
	"FFFF7D",
	"7DA852",
	"7D7DA8",
	"FF7DFF",
	"7D52FF",
	"527DA8",
	"7DFF7D",
	"52FF52",
	"7DFF52",
	"527D52",
	"A87D7D",
	"FFFF52",
	"FF52FF",
	"527DFF",
	"7D7DA8",
	"527D52",
	"FF52A8",
	"7D7D7D",
	"FFFF7D",
	"52FF52",
	"7D5252",
	"FFFF52",
	"A8FF7D",
	"FF7DA8",
	"7DFF7D",
	"52A852",
	"FFFF27",
	"527D52",
	"FF527D",
	"A8FF7D",
	"7D527D",
	"7D7D52",
	"7D52FF",
	"FF7DFF",
	"FF52FF",
	"527DFF",
	"7DFF7D",
	"FFA87D",
	"7DFD0B",
	"FF7DA8",
	"FFFF52",
	"A8A87D",
	"527DA8",
	"FF527D",
	"7D7D52",
	"A87D7D",
	"527D52",
	"7DFF7D",
	"7DFF52",
	"7DA87D",
	"7DA852",
	"FFFF7D",
	"52A852",
	"7D7DFF",
	"52A87D",
	"7D527D",
	"FF7D7D",
	"A8527D",
	"A8FF52",
	"7DFF7D",
	"A87D52",
	"FF7D7D",
	"52FF7D",
	"FFA87D",
	"7DFFA8",
	"52FF52",
	"FFFF7D",
	"7DA852",
	"7DA8FF",
	"A8527D",
	"A87D7D",
	"7D52A8",
	"7D7DFF",
	"FF7D7D",
	"52A87D",
	"7D52FF",
	"7D7D52",
	"FF7D7D",
	"7DA8FD",
	"FCFFFD",
	"8CFF7D",
	"5252A8",
	"FF7DFD",
	"15FFA8",
	"52FD0C",
	"FF7DFD",
	"13FFA8",
	"FD06FF",
	"7DFFFF",
	"7DFFFF",
	"FF7DFD",
	"14FF7D",
	"FD05FF",
	"7DFFFF",
	"7DFD0D",
	"FF7DFD",
	"09FF7D",
	"A8FFFF",
	"277DA8",
	"7D7DA8",
	"52A8A8",
	"7D7DFF",
	"A8FD04",
	"7DFF52",
	"7DFFFF",
	"277D52",
	"7D7D7D",
	"A8FFA8",
	"7D7D7D",
	"52FF52",
	"FF527D",
	"7D7D52",
	"7DFFFF",
	"527D52",
	"A8A87D",
	"7DA852",
	"A827FF",
	"7D7DA8",
	"7DFF7D",
	"7D7D52",
	"7D52FF",
	"52A87D",
	"FFFF7D",
	"52FF7D",
	"A8527D",
	"7D7D52",
	"7DA8FD",
	"047D27",
	"A87D7D",
	"A85252",
	"FFFF27",
	"7D7DA8",
	"7DFF7D",
	"7DA87D",
	"FF7D52",
	"FF277D",
	"A8FD07",
	"FFA8A8",
	"FFFF7D",
	"A87D7D",
	"52A8FD",
	"047D52",
	"FFA87D",
	"527DFF",
	"7D7D52",
	"FFFF7D",
	"7DFF7D",
	"527D7D",
	"FF7DFF",
	"FF7DFF",
	"7D7D7D",
	"FF7D7D",
	"FF7D7D",
	"FFFF7D",
	"7DFF7D",
	"7DFF7D",
	"A87D7D",
	"7DFFFD",
	"047DFF",
	"7D7DFF",
	"7D27FD",
	"047DFF",
	"FFFF7D",
	"7DA87D",
	"7D7DFF",
	"7D7DFF",
	"7D7DFF",
	"7D7DFF",
	"7D7D7D",
	"527DFF",
	"7DFFFF",
	"7DFF7D",
	"7DFFFF",
	"FD047D",
	"FF277D",
	"7D7DFF",
	"7DFD07",
	"FF7DA8",
	"FFFF52",
	"A8527D",
	"52A852",
	"7DA87D",
	"52FF7D",
	"7D277D",
	"FFA852",
	"7DFFFF",
	"527DFF",
	"7D527D",
	"A8FFA8",
	"7D527D",
	"52A852",
	"A8527D",
	"52FF52",
	"7DA8FF",
	"527DFF",
	"7DA87D",
	"52A852",
	"7D52FF",
	"7D7D52",
	"FFFF7D",
	"527D52",
	"7D52A8",
	"5252FF",
	"FFFF52",
	"52FF52",
	"52527D",
	"7D7D52",
	"7DA87D",
	"527DFF",
	"52A87D",
	"52A852",
	"52FFFF",
	"277DA8",
	"52FFFF",
	"7D7D52",
	"FFFF7D",
	"52A827",
	"7DA8FD",
	"51FF7D",
	"A8FD08",
	"FF7DFF",
	"FF7DFD",
	"12FF7D",
	"A8FD92",
	"FF7DFD",
	"15FFA8",
	"FD05FF",
	"7D7DFF",
	"FFFF7D",
	"FFFFA8",
	"A8FD08",
	"FF7DFD",
	"0FFF7D",
	"FD07FF",
	"7DFFA8",
	"FFFF7D",
	"FD06FF",
	"7DFD05",
	"FF7DFD",
	"07FF7D",
	"FD0CFF",
	"7DFD06",
	"FFA8FD",
	"07FF7D",
	"FFFFFF",
	"277D7D",
	"7DA87D",
	"7DA852",
	"A8A87D",
	"52FF7D",
	"7DA87D",
	"A87D7D",
	"FF7DFF",
	"527DA8",
	"FF527D",
	"A8FFFF",
	"5252A8",
	"7D52A8",
	"FF7D7D",
	"A87D52",
	"FF527D",
	"52FF52",
	"A8FF52",
	"527DA8",
	"FF527D",
	"A87D27",
	"FF52A8",
	"FD04FF",
	"52FF27",
	"FFFFFD",
	"057D52",
	"FF527D",
	"A8A87D",
	"7D52A8",
	"52FF52",
	"7DFFFF",
	"277DA8",
	"7D527D",
	"7DA8A8",
	"7D7DA8",
	"5252A8",
	"7D7DA8",
	"52FF7D",
	"52527D",
	"A8FF52",
	"7D52FF",
	"FFFF7D",
	"FF7DFF",
	"7DFF7D",
	"7D7D52",
	"FF7D7D",
	"A8527D",
	"7D52A8",
	"7D7DFF",
	"7DFF7D",
	"7DA8FF",
	"FD047D",
	"FF52FF",
	"7D7D52",
	"A87D7D",
	"A8FF7D",
	"FF527D",
	"7DFF52",
	"7DFFFF",
	"527DFF",
	"7D52FF",
	"7D7DFF",
	"7D7D7D",
	"52FD04",
	"FF7DFF",
	"7DFFFF",
	"7D7DFF",
	"7D7DFF",
	"A87D7D",
	"A87D7D",
	"FF7D27",
	"FD047D",
	"FFFF7D",
	"7DA827",
	"7D7D52",
	"FFA87D",
	"527DFF",
	"527D7D",
	"5252FF",
	"FF7D52",
	"7DFF7D",
	"7DA852",
	"7DFFFF",
	"FF277D",
	"52FFA8",
	"7D5252",
	"A87DFF",
	"5252A8",
	"527DA8",
	"FD047D",
	"FF52FF",
	"52A87D",
	"FF527D",
	"7DFFFF",
	"2752A8",
	"5252A8",
	"FF5252",
	"A87D52",
	"A8527D",
	"52A852",
	"FFFF7D",
	"52FF52",
	"A8527D",
	"A87D27",
	"A8527D",
	"7DFFFF",
	"FF52FF",
	"52A8FF",
	"7D52FF",
	"527D52",
	"A85252",
	"52A852",
	"7D527D",
	"52A852",
	"7DA8FF",
	"52A87D",
	"7D5227",
	"7DA87D",
	"7D27A8",
	"5227A8",
	"7D527D",
	"52FF52",
	"7D52FF",
	"527D52",
	"5252FD",
	"FCFFFD",
	"0DFF7D",
	"FF7D7D",
	"5252FF",
	"27FF7D",
	"7D7DFD",
	"07FF7D",
	"FD05FF",
	"7DFD08",
	"FF7DFF",
	"FF277D",
	"52FF52",
	"7D7DFF",
	"277D7D",
	"FD09FF",
	"52FFFF",
	"7D52FF",
	"FF7DFD",
	"04FF7D",
	"FFA8FD",
	"06FF7D",
	"FF7DA8",
	"A87DFF",
	"7D7D52",
	"FF7D7D",
	"52FF52",
	"7D7DFD",
	"09FF52",
	"FD16FF",
	"52A827",
	"FF52FF",
	"FF52A8",
	"7D527D",
	"FD05FF",
	"7D527D",
	"7D7DA8",
	"7D527D",
	"FF5252",
	"7DA8FF",
	"527D52",
	"FFFF7D",
	"FF7D52",
	"FFFFA8",
	"FF527D",
	"7DFFFF",
	"7D7D52",
	"7D7DFF",
	"5252FF",
	"FF7D7D",
	"A8FF52",
	"FF7D7D",
	"A827FD",
	"047D52",
	"7DFFFF",
	"52FF52",
	"FF527D",
	"FF7DFF",
	"FFA87D",
	"FFFF52",
	"FD05FF",
	"7D7DA8",
	"7D7DFF",
	"5252A8",
	"7D7DA8",
	"52A8FD",
	"10FF52",
	"7D52FF",
	"7DFFFF",
	"FD057D",
	"FD05FF",
	"7DFF7D",
	"527D7D",
	"7DFF7D",
	"FF7D7D",
	"FF7DA8",
	"A8527D",
	"FFFF27",
	"7D527D",
	"FF7D27",
	"FF52A8",
	"7DFFFF",
	"7D7D7D",
	"FF7D7D",
	"FF7DFF",
	"FFFFFD",
	"047DFF",
	"527D7D",
	"7DA8A8",
	"527D7D",
	"FD04FF",
	"7D7DFF",
	"5252A8",
	"7DFFA8",
	"FF7DFF",
	"A87DFF",
	"FFA8FF",
	"FF7DFF",
	"7DFF7D",
	"7DFF7D",
	"7D7D52",
	"A87D7D",
	"FD10FF",
	"52FF52",
	"FF52FF",
	"FF7D52",
	"A8527D",
	"527D7D",
	"FFFF7D",
	"527D52",
	"7DA87D",
	"527DFF",
	"7D52FF",
	"52A852",
	"5252FF",
	"FF7DFF",
	"7DA87D",
	"5252FF",
	"27527D",
	"FFFF52",
	"7D52FF",
	"52A852",
	"27FFFF",
	"527D7D",
	"FF52FF",
	"527DA8",
	"52A87D",
	"527D52",
	"FD04FF",
	"52A87D",
	"A8FF52",
	"7D527D",
	"FF7D52",
	"7DA87D",
	"52A8FF",
	"FF527D",
	"A87D52",
	"A85227",
	"A87D52",
	"7D527D",
	"7DFD1D",
	"FFA8FD",
	"FCFFFD",
	"76FF7D",
	"7DFFF8",
	"FD05FF",
	"52FD05",
	"FF52FD",
	"15FF7D",
	"FFFFFF",
	"7D7DFD",
	"18FF52",
	"FD14FF",
	"A8FFA8",
	"52FD04",
	"FFA852",
	"FFFFFF",
	"52FFFF",
	"FF52FD",
	"16FF52",
	"A8A852",
	"FF7D7D",
	"A85252",
	"FF7D7D",
	"FFFF52",
	"527DA8",
	"A8FF7D",
	"7DA87D",
	"7D7DA8",
	"7DFF7D",
	"A8A8FF",
	"7DFF7D",
	"7DFF7D",
	"52FD04",
	"7DFF7D",
	"A87D7D",
	"7DFF52",
	"A8FFFF",
	"7D7DFF",
	"FD057D",
	"52FFFF",
	"52A8FD",
	"047DFF",
	"FF7DA8",
	"A87D7D",
	"A87D7D",
	"FF7DA8",
	"A8A87D",
	"FF277D",
	"52A8FF",
	"FF527D",
	"FF7D52",
	"7D7D7D",
	"A8527D",
	"FF7D7D",
	"FD12FF",
	"7D7D7D",
	"52FF52",
	"7D52FF",
	"527D52",
	"52FFFF",
	"52FF52",
	"7DA8FF",
	"527D52",
	"7D527D",
	"527D52",
	"5252FF",
	"FF7D7D",
	"FF52FF",
	"527D52",
	"7DFF7D",
	"52FF52",
	"7DFF7D",
	"527D27",
	"FFFF7D",
	"A87DFF",
	"7D52FF",
	"527DFF",
	"FF527D",
	"FF7D52",
	"FFFFFF",
	"52A8FD",
	"047D52",
	"52FFFD",
	"057DFF",
	"7D52FF",
	"52FFFF",
	"2727A8",
	"52FF52",
	"7DFF7D",
	"52FF52",
	"27527D",
	"FD11FF",
	"7DFF52",
	"7DFFFD",
	"047D52",
	"A87D7D",
	"FFFF52",
	"7DFF52",
	"FFFFA8",
	"7D52FF",
	"A87D52",
	"FF52A8",
	"7DFFA8",
	"A87DFF",
	"7DFFFD",
	"067DFF",
	"7D7D7D",
	"FF7DA8",
	"7D7DA8",
	"FF7D7D",
	"A87D7D",
	"7DFF7D",
	"7DFFFF",
	"7DA87D",
	"7D7DFF",
	"FFFF7D",
	"52A852",
	"7DA87D",
	"7DFF7D",
	"7D52FF",
	"7DFF52",
	"7DFF7D",
	"FFA8A8",
	"FFFD06",
	"7DA852",
	"7DA87D",
	"7DA8FD",
	"22FF52",
	"A8FDFC",
	"FFFD1B",
	"FF7D52",
	"FF52FD",
	"05FFA8",
	"FD05FF",
	"A8A8FD",
	"04FFA8",
	"7D7DA8",
	"FD67FF",
	"7D7DFF",
	"7D7DFF",
	"A8FD05",
	"7DA8FD",
	"047DA8",
	"7DFF52",
	"FD047D",
	"FD67FF",
	"7D52FF",
	"527D7D",
	"A8527D",
	"7DA852",
	"A87D52",
	"7DA852",
	"FF527D",
	"527D7D",
	"7DFD67",
	"FF7D7D",
	"FF7D52",
	"FD047D",
	"A8527D",
	"7D7D27",
	"A87D7D",
	"52A87D",
	"A8527D",
	"A8A8FD",
	"FCFFFD",
	"FCFFFD",
	"FCFFFD",
	"FCFFFD",
	"C2FFFF",
];

var colListingC = [
	"8a4926",
	"b66831",
	"de9751",
	"fbbe82",
	"ffffff",
	"000000",
	"544b4f",
	"aa99a1",
	"e0c9d3",
	"7f1db2",
	"a947d6",
	"c983e9",
	"370e80",
	"582d9b",
	"764eb4",
	"005ac0",
	"4f8cdf",
	"9dbdee",
	"00bd22",
	"5ddd51",
	"a0ed94",
	"ffdc2a",
	"ffed94",
	"fef6cb",
	"fe2918",
	"ff8c91",
	"ffdfc8",
	"ffbf8d",
	"ff8015",
];

var colListingB = [
	"8a4926",
	"b66831",
	"de9751",
	"fbbe82",
	"ffffff",
	"000000",
	"544b4f",
	"aa99a1",
	"e0c9d3",
	"990099",
	"6600cc",
	"0000ff",
	"00cc00",
	"ffff00",
	"ff9900",
	"ff0000",
	"c347c0",
	"aa78e7",
	"9fa0fd",
	"89e77b",
	"fefea2",
	"ffd29e",
	"ff9d9a",
	"ae2fad",
	"8945dc",
	"6a6cfc",
	"56dc49",
	"fefd70",
	"ffba67",
	"ff6861",
];

var colListing = [
	/*trying for the greatest 32- color shade */
	"ffffff",
	"e0c9d3",
	"aa99a1",
	"544b4f",
	"000000",
	"ff6861",
	"ff0000",
	"eb2504",
	"fbbe82",
	"de9751",
	"b66831",
	"8a4926",
	"ffba67",
	"ff9900",
	"f1630f",
	"ffff00",
	"fefeba",
	"ffff00",
	"e5e42c",
	"56dc49",
	"00cc00",
	"009d1a",
	"6a6cfc",
	"0000ff",
	"0f15b7",
	"6600cc",
	"8945dc",
	"38139c",
	"ae2fad",
	"990099",
	"5c0e5f",
];
